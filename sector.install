<?php

use Drupal\node\Entity\Node;
use Drupal\user\Entity\User;
use Drupal\sector\SectorInstallHelpers;

/**
 * @file
 * Install, update and uninstall functions for the profilename install profile.
 */

/**
 * Implements hook_install_tasks().
 */
function sector_install_tasks() {
  return [
    'sector_install_default_content' => [
      'display_name' => t('Sector install default content'),
      'type' => 'default',
    ],
  ];
}

/**
 * Content install task.
 */
function sector_install_default_content() {
  \Drupal::service('theme_installer')->install(['sector_radix_starter']);
  \Drupal::service('theme_installer')->install(['claro']);
  \Drupal::service('module_installer')->install(['sector_default_content'], FALSE);
  \Drupal::configFactory()
    ->getEditable('system.theme')
    ->set('default', 'sector_radix_starter')
    ->set('admin', 'claro')
    ->save();

  // Set default pages.
  \Drupal::configFactory()->getEditable('system.site')
    ->set('page.403', '/node/14')
    ->set('page.404', '/node/5')
    ->set('page.front', '/node/10')
    ->save(TRUE);

  _sector_set_default_pages();

  // Cleanup functions.
  // TODO - Move these to InstallHelpers.
  createEntityqueues();
  createUsers();
  generateAlias();
  excludeXmlsitemapNodes();
  \Drupal::classResolver(SectorInstallHelpers::class)->addAntibotConfig();

  // Rebuild permissions
  node_access_rebuild();
}



function _sector_set_default_pages() {
  $page_403_uuid = 'e5bfd72c-0f7b-4e37-89a3-c238384ce7bd';
  $page_404_uuid = '07b023c8-f0a1-40c7-a13f-5f00852ce486';
  $page_front_uuid = '664f3787-54cf-4b59-9756-940e8c30fbfb';
  $entity_type_manager = \Drupal::entityTypeManager();
  $storage = $entity_type_manager->getStorage('node');
  $config = \Drupal::configFactory()->getEditable('system.site');

  $query = $storage->getQuery();
  if ($page_403 = $query->condition('uuid', $page_403_uuid)->execute()) {
    $config->set('page.403', '/node/' . array_shift($page_403));
  }

  $query = $storage->getQuery();
  if ($page_404 = $query->condition('uuid', $page_404_uuid)->execute()) {
    $config->set('page.404', '/node/' . array_shift($page_404));
  }

  $query = $storage->getQuery();
  if ($page_front = $query->condition('uuid', $page_front_uuid)->execute()) {
    $config->set('page.front', '/node/' . array_shift($page_front));
  }
  $config->save(TRUE);
}


/**
 * Loads the two entityqueues on the front page and adds the content to them.
 *
 * TODO - Some code duplication here. I think we could polish that.
 */
function createEntityqueues() {
  // Load entityqueue. Need to load items next.
  $queueStorage = \Drupal::entityTypeManager()->getStorage('entity_subqueue');
  $nodeStorage = \Drupal::entityTypeManager()->getStorage('node');

  $queues = [
    'information_tiles' => [
      '1a98019e-14f4-4278-8191-325f6b591e2a',
      '93dd2d72-4682-4690-a39a-4072edeeb69c',
      'a269bf31-4228-450c-92e2-b9f2070ff9ac',
    ],
    'promotional_links' => [
      '1a98019e-14f4-4278-8191-325f6b591e2a',
      'bbc90cf0-2b5c-4d18-95c9-c579d9f07f28',
      'a269bf31-4228-450c-92e2-b9f2070ff9ac',
      '852fad3c-0ee8-4b9e-8eba-96bf7bdca7eb',
      '93dd2d72-4682-4690-a39a-4072edeeb69c',
      '3555ec5b-3739-4017-8b97-e4788c100b9d',
    ],
    'promotional_tiles' => [
      '32abb570-0e4a-400f-8278-664dbbae4843',
      '1a1f5eec-3cee-498e-a597-82b59334afdf',
      '645ad6b1-eae2-43cc-8c24-ec6425020692',
    ],
  ];

  foreach ($queues as $queue_name => $items) {
    $nodes = $nodeStorage->loadByProperties(['uuid' => $items]);
    $queue = $queueStorage->load($queue_name);
    $queue->set('items', $nodes);
    $queue->save();
  }
}

/**
 * Creates the default users.
 *
 * Passwords are randomly generated.
 */
function createUsers() {
  $users = [
    'Content Editor' => 'content_editor',
    'Content Administrator' => ['content_administrator', 'content_editor'],
    'Support Agent' => 'administrator',
    'Robot' => 'robot',
  ];
  $count = 0;
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  foreach ($users as $username => $role) {
    $user = User::create();

    // Randomly generate a 10 character pass.
    $randomPassword = user_password(10);
    //Mandatory settings
    $user->setPassword($randomPassword);
    $user->enforceIsNew();
    $user->setUsername($username);
    if (isset($role)) {
      if (is_array($role)) {
        foreach ($role as $r) {
          $user->addRole($r);
        }
      }
      else {
        $user->addRole($role);
      }
    }
    $user->set("init", 'email');
    $user->set("langcode", $language);
    $user->set("preferred_langcode", $language);
    $user->set("preferred_admin_langcode", $language);
    $user->block();
    //Save user
    $res = $user->save();
    $count++;
  }
}

/**
 * Regenerates all node aliases.
 */
function generateAlias() {
  $nodes = Node::loadMultiple();
  $pathautoGenerator = \Drupal::service('pathauto.generator');
  foreach ($nodes as $node) {
    $pathautoGenerator->updateEntityAlias($node, 'insert');
  }
}

function excludeXmlsitemapNodes() {
  $nids = [14, 5];
  $xmlSitemapLinkStorage = \Drupal::service('xmlsitemap.link_storage');
  foreach ($nids as $nid) {
    $link = $xmlSitemapLinkStorage->load('node', $nid);
    if ($link) {
      $link['status'] = "0";
      $link['status_override'] = "1";
      $xmlSitemapLinkStorage->save($link);
    }
  }
}

/**
 * Add missing oembed providers url into media.settings
 */
function sector_update_8401() {
  $data = ["oembed_providers_url" => "https://oembed.com/providers.json"];
  \Drupal::configFactory()->getEditable('media.settings')->merge($data)->save();
}

/**
 * Enable the Fakeobjects module
 */
function sector_update_8501() {
  if (!\Drupal::moduleHandler()->moduleExists('fakeobjects')) {
    \Drupal::service('module_installer')->install(['fakeobjects']);
  }
}

/**
 * Reset the WYSIWYG template library path.
 */
function sector_update_8502() {
  $config = ['library_path' => 'libraries/templates'];
  if (\Drupal::moduleHandler()->moduleExists('wysiwyg_template')) {
    \Drupal::configFactory()->getEditable('wysiwyg_template.settings')->merge($config)->save();
  }
}

/**
 * Replace Better Formats with Allowed Formats.
 */
function sector_update_9001() {
  if (!\Drupal::moduleHandler()->moduleExists('allowed_formats')) {
    \Drupal::service('module_installer')->install(['allowed_formats']);
    // Load all field configs.
    $field_configs = \Drupal::entityTypeManager()->getStorage('field_config')->loadMultiple();
    $converted = 0;
    foreach ($field_configs as $field_config) {
      // Check if a field has better_formats config.
      $betterFormatsSettings = $field_config->getThirdPartySetting('better_formats', 'allowed_formats') ?? FALSE;
      if ($betterFormatsSettings) {
        foreach ($betterFormatsSettings as $format => $betterFormatsSetting) {
          // Set the allowed_formats config using the better_format config.
          $field_config->setThirdPartySetting('allowed_formats', $format, $betterFormatsSetting);
        }
        // Save.
        try {
          $field_config->save();
        }
        catch (Drupal\Core\Entity\EntityStorageException $e) {
          return $e->getMessage();
        }
        $converted++;
      }
    }
    // Allow better_formats to remove its own config by uninstalling it.
    if (\Drupal::moduleHandler()->moduleExists('better_formats')) {
      \Drupal::service('module_installer')->uninstall(['better_formats']);
    }

    return t('<p>@count field configs converted. <em>Better Formats</em> has been replaced with <em>Allowed Formats</em> and should be removed:</p><p>composer remove drupal/better_formats</p>', ['@count' => $converted]);
  }
}

/**
 * Implements hook_requirements().
 *
 * @param $phase
 * @return array
 */
function sector_requirements($phase) {
  $requirements = [];
  /** @var \Drupal\Core\Extension\ExtensionList $extensionList */
  $extensionList = \Drupal::service('extension.list.module');
  $betterFormatsExists = $extensionList->exists('better_formats');
  // Instruct the user to install Better Formats before continuing with updates.
  // Remove in 9.2/9.3
  if ($phase == 'update' && drupal_get_installed_schema_version('sector') < 9001) {
    if (!$betterFormatsExists) {
      $requirements['sector']['title'] = 'Sector';
      $requirements['sector']['description'] = t('<p>Please install <em>Better Formats</em> with composer before continuing with the upgrade:</p><p><code>composer require drupal/better_formats</code></p><p>You will be prompted to remove it again after the update is complete.</p>');
      $requirements['sector']['severity'] = REQUIREMENT_ERROR;
    }
  }
  // If better formats exists after the D9 upgrade, write a line to the status report instructing the user to remove it.
  // Remove in 9.2/9.3
  if ($phase == 'runtime' && drupal_get_installed_schema_version('sector') >= 9001) {
    if ($betterFormatsExists) {
      $requirements['sector']['title'] = 'Sector';
      $requirements['sector']['description'] = t('<p><em>Better Formats</em> has been replaced with <em>Allowed Formats</em> and should be removed:</p><p><code>composer remove drupal/better_formats</code></p>');
      $requirements['sector']['severity'] = REQUIREMENT_ERROR;
    }
  }
  return $requirements;
}
