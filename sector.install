<?php

use Drupal\node\Entity\Node;
use Drupal\user\Entity\User;
use Drupal\sector\SectorInstallHelpers;

/**
 * @file
 * Install, update and uninstall functions for the profilename install profile.
 */

/**
 * Implements hook_install_tasks().
 */
function sector_install_tasks() {
  // return [
  //   'sector_install_default_content' => [
  //     'display_name' => t('Sector install default content'),
  //     'type' => 'default',
  //   ],
  // ];
}

/**
 * Content install task.
 */
function sector_install_default_content() {
  \Drupal::service('theme_installer')->install(['sector_radix_starter']);
  \Drupal::service('theme_installer')->install(['claro']);
  \Drupal::service('module_installer')->install(['sector_default_content'], FALSE);
  \Drupal::configFactory()
    ->getEditable('system.theme')
    ->set('default', 'sector_radix_starter')
    ->set('admin', 'claro')
    ->save();

  // Set default pages.
  \Drupal::configFactory()->getEditable('system.site')
    ->set('page.403', '/node/14')
    ->set('page.404', '/node/5')
    ->set('page.front', '/node/10')
    ->save(TRUE);

  // Cleanup functions.
  // TODO - Move these to InstallHelpers.
  createEntityqueues();
  createUsers();
  generateAlias();
  excludeXmlsitemapNodes();
  \Drupal::classResolver(SectorInstallHelpers::class)->addAntibotConfig();

  // Rebuild permissions
  node_access_rebuild();
}

/**
 * Loads the two entityqueues on the front page and adds the content to them.
 *
 * TODO - Some code duplication here. I think we could polish that.
 */
function createEntityqueues() {
  // Load entityqueue. Need to load items next.
  $queueStorage = \Drupal::entityTypeManager()->getStorage('entity_subqueue');
  $informationalQueue = $queueStorage->load('information_tiles');
  $promotionalLinksQueue = $queueStorage->load('promotional_links');
  $promotionalTilesQueue = $queueStorage->load('promotional_tiles');
  $InformationTileEntityIds = [
    '8',
    '11',
    '4',
  ];
  $promotionalLinksEntityIds = [
    '8',
    '6',
    '4',
    '7',
    '11',
    '19',
  ];
  $promotionalTilesEntityIds = [
    '23',
    '24',
    '25',
  ];
  $items = [];
  $nodeStorage = \Drupal::entityTypeManager()->getStorage('node');
  foreach ($InformationTileEntityIds as $id) {
    $node = $nodeStorage->load($id);
    $items[] = $node;
  }
  $informationalQueue->set('items', $items);
  $informationalQueue->save();
  $items = [];
  foreach ($promotionalLinksEntityIds as $id) {
    $node = $nodeStorage->load($id);
    $items[] = $node;
  }
  $promotionalLinksQueue->set('items', $items);
  $promotionalLinksQueue->save();
  $items = [];
  foreach ($promotionalTilesEntityIds as $id) {
    $node = $nodeStorage->load($id);
    $items[] = $node;
  }
  $promotionalTilesQueue->set('items', $items);
  $promotionalTilesQueue->save();
}

/**
 * Creates the default users.
 *
 * Passwords are randomly generated.
 */
function createUsers() {
  $users = [
    'Content Editor' => 'content_editor',
    'Content Administrator' => ['content_administrator', 'content_editor'],
    'Support Agent' => 'administrator',
    'Robot' => 'robot',
  ];
  $count = 0;
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  foreach ($users as $username => $role) {
    $user = User::create();

    // Randomly generate a 10 character pass.
    $randomPassword = user_password(10);
    //Mandatory settings
    $user->setPassword($randomPassword);
    $user->enforceIsNew();
    $user->setUsername($username);
    if (isset($role)) {
      if (is_array($role)) {
        foreach ($role as $r) {
          $user->addRole($r);
        }
      }
      else {
        $user->addRole($role);
      }
    }
    $user->set("init", 'email');
    $user->set("langcode", $language);
    $user->set("preferred_langcode", $language);
    $user->set("preferred_admin_langcode", $language);
    $user->block();
    //Save user
    $res = $user->save();
    $count++;
  }
}

/**
 * Regenerates all node aliases.
 */
function generateAlias() {
  $nodes = Node::loadMultiple();
  $pathautoGenerator = \Drupal::service('pathauto.generator');
  foreach ($nodes as $node) {
    $pathautoGenerator->updateEntityAlias($node, 'insert');
  }
}

function excludeXmlsitemapNodes() {
  $nids = [14, 5];
  $xmlSitemapLinkStorage = \Drupal::service('xmlsitemap.link_storage');
  foreach ($nids as $nid) {
    $link = $xmlSitemapLinkStorage->load('node', $nid);
    if ($link) {
      $link['status'] = "0";
      $link['status_override'] = "1";
      $xmlSitemapLinkStorage->save($link);
    }
  }
}
