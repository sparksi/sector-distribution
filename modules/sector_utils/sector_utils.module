<?php

use Drupal\Core\Entity\EntityPublishedInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\media\MediaInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Url;
use Drupal\Core\Entity\ContentEntityDeleteForm;

/**
 * @file
 */

/**
 * Implements hook_page_attachments().
 *
 * Loads the CSS for the admin theme.
 */
function sector_utils_page_attachments(array &$attachments) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  // Lets just keep this for the default admin theme. If people have changed
  // they probably have their own styles/look.
  if ($theme == 'claro') {
    $attachments['#attached']['library'][] = 'sector_utils/admin';
  }
}

/**
 * Implements hook_form_alter().
 */
function sector_utils_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  sector_utils_track_entity_usage($form, $form_state, $form_id);
}

/**
 * Implements hook_form_node_form_alter().
 */
function sector_utils_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  // Lets just keep this for the default admin theme. If people have changed
  // they probably have their own styles/look.
  if ($theme == 'claro') {
    // Shift the status container from the footer into the meta group.
    $form['status']['#group'] = 'meta';
    $form['status']['#markup'] = '<h3>' . t('Publishing') . '</h3>';
    // Clone the form actions into the meta container.
    $form['meta']['actions'] = $form['actions'];
    // Make the original actions inaccessible.
    $form['actions']['#access'] = FALSE;
  }

  // Improve page node status checkbox by changing the label
  // from "Publishing status" to "Publish" and removing the description.
  // This should bring it in line with all other content types.
  switch ($form_id) {
    case 'node_page_form':
    case 'node_page_edit_form':
      $element = &$form['status']['widget']['value'];
      $element['#title'] = t('Published');
      $element['#description'] = t('');
      break;
  }
}

/**
 * Helper function to add extra text to the media delete form.
 */
function sector_utils_track_entity_usage(&$form, FormStateInterface $form_state, $form_id) {
  if (!\Drupal::moduleHandler()->moduleExists('entity_usage')) {
    // All code below is regarding entity_usage. If the module isn't enabled,
    // exit early to save processing time.
    return;
  }

  $callbackObject = $form_state->getBuildInfo()['callback_object'];
  // We want to add extra details to the media entity delete form.
  if (!$callbackObject instanceof ContentEntityDeleteForm || !$callbackObject->getEntity() instanceof MediaInterface) {
    // Early exit. We only want Media.
    return;
  }
  $entity = $callbackObject->getEntity();
  if (!$entity) {
    // No entity. Stop here. Can't see why this would ever fail but just in case.
    return;
  }
  $formIdWithBundle = 'media_' . $entity->bundle() . '_delete_form';
  if ($form_id == $formIdWithBundle) {
    $url = Url::fromRoute('entity.media.entity_usage', ['media' => $entity->id()]);
    $entityUsage = Drupal::service('entity_usage.usage');
    $usages = $entityUsage->listUsage($entity);
    if (empty($usages)) {
      // No usages. Stop here, default works.
      return;
    }
    // Extra helper text on the delete form.
    $markup = "<p>Are you sure you want to delete <strong>" . $entity->getName() . "?</strong></p>";
    $markup .= "<p>This media item is <a href='" . $url->toString() . "'>used in either published content or revisions</a>. Are you sure you want to delete it?</p>";
    $markup .= "<p>This action cannot be undone.</p>";
    $form['description']['#markup'] = new TranslatableMarkup($markup);
  }
}

/**
 * Implements hook_contextual_links_view_alter().
 *
 * Hides the configure block link based if the user doesn't have the right
 * permission.
 */
function sector_utils_contextual_links_view_alter(&$element, $items) {
  $user = \Drupal::currentUser();

  if(isset($element['#links']['block-configure'])) {
    if (!$user->hasPermission('configure blocks from contextual links')) {
      unset($element['#links']['block-configure']);
    }
  }
}

/**
 * Implements hook_ds_pre_render_alter().
 *
 * Add entity-status-unpublished class to all view modes other than full.
 * CSS in the theme will add a visual indicator to allow editors to recognise
 * unpublished content.
 */
function sector_utils_ds_pre_render_alter(array &$layout_render_array, array $context, array &$vars) {
  if ($layout_render_array['#view_mode'] != 'full'
    && !empty($context['entity'])
    && $context['entity'] instanceof EntityPublishedInterface
    && !$context['entity']->isPublished()){
    $vars['attributes']['class'][] = 'entity-status-unpublished';
  }
}
