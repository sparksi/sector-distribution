<?php
/**
 * @file
 * Install, update and uninstall functions for the profilename install profile.
 */
use Drupal\user\Entity\Role;
use Drupal\Core\Entity\EntityInterface;


/*
 * Implements hook_install()
 */
function sector_page_install() {
    $administrator_role_object = Role::load('content_administrator');
    if($administrator_role_object) {
        $administrator_role_object->grantPermission('delete any sector_page content');
        $administrator_role_object->grantPermission('revert sector_page revisions');
        $administrator_role_object->grantPermission('view sector_page revisions');

        $administrator_role_object->save();
    }

    $editor_role_object = Role::load('content_editor');
    if($editor_role_object) {
        $editor_role_object->grantPermission('create sector_page content');
        $editor_role_object->grantPermission('delete own sector_page content');
        $editor_role_object->grantPermission('delete sector_page revisions');
        $editor_role_object->grantPermission('edit any sector_page content');
        $editor_role_object->grantPermission('edit own sector_page content');

        $editor_role_object->save();
    }

    $moderator_role_object = Role::load('content_moderator');
    if($moderator_role_object) {
        $moderator_role_object->grantPermission('delete any sector_page content');
        $moderator_role_object->grantPermission('revert sector_page revisions');
        $moderator_role_object->grantPermission('view sector_page revisions');

        $moderator_role_object->save();
    }
}

/*
 * Implements hook_uninstall()
 */
function sector_page_uninstall() {

    // Delete all nodes of given content type.
    $storage_handler = \Drupal::entityTypeManager()->getStorage('node');
    $nodes = $storage_handler->loadByProperties(['type' => 'sector_page']);
    $storage_handler->delete($nodes);

    // Delete content type.
    $content_type = \Drupal::entityTypeManager()->getStorage('node_type')->load('sector_page');
    $content_type->delete();
}

/**
 * Implements hook_ENTITY_TYPE_insert() for node entities.
 */
function sector_page_node_insert(EntityInterface $entity) {

    switch ($entity->uuid()) {
        case '03ae7a81-5206-4dd6-9b82-b998054281f6':
            \Drupal::configFactory()
            ->getEditable('system.site')
            ->set('page.front', '/node/' . $entity->id())
            ->save();

            \Drupal::logger('sector_default_content')->notice('Homepage path has been set to the example content node #%nid', [
            '%nid' => $entity->id(),
            ]);
        break;

        case '28a742ec-87b6-4dda-82a9-ba9353df64a7':
            \Drupal::configFactory()
            ->getEditable('system.site')
            ->set('page.404', '/node/' . $entity->id())
            ->save();

            \Drupal::logger('sector_default_content')->notice('Page not found path has been set to the example content node #%nid', [
            '%nid' => $entity->id(),
            ]);
        break;

        case '7d8fc629-24ab-4d2a-a36e-b19e2b58d2de':
            \Drupal::configFactory()
              ->getEditable('system.site')
              ->set('page.403', '/node/' . $entity->id())
              ->save();

            \Drupal::logger('sector_default_content')->notice('Access denied path has been set to the example content node #%nid', [
              '%nid' => $entity->id(),
            ]);
        break;

        case '9e9e3520-8d1a-4294-80ae-dac00bf57d85' :
            $block = Drupal\block\Entity\Block::load('sector_site_map');

            if(!$block) {
                return;
            }

            $block->setVisibilityConfig('request_path', array('id' => 'request_path',
                  'pages'=> '/node/' . $entity->id(),
                  'negate' => false,
                )
            );
            $block->save();

            \Drupal::logger('sector_page')->notice('Setting sitemap menu block to appear on #%nid', [
                '%nid' => $entity->id(),
            ]);
        break;
    }
}