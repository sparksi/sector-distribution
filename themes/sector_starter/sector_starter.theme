<?php

use Drupal\Component\Utility\Html;
use Drupal\Core\Entity;
use Drupal\taxonomy\Entity\Term;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\media\MediaInterface;
/**
 * @file
 * Adjust the theme settings form to add local tweaks and options.
 *
 * https://www.drupal.org/node/177868
 *
 * /admin/appearance/settings/sector_starter
 *
 * This mimics what Bootstrap does in its own form_alter.
 * Beware, removing Bootstrap may break assumptions about the theme form made here.
 *
 * Creates the SVG logo source textfield so Designers can use it in their twig
 * templates.
 *
 * Implements hook_form_alter().
 */
function sector_starter_form_system_theme_settings_alter(&$form, &$form_state) {
  // Vertical tab.
  $form['sector_starter'] = array(
    '#type' => 'vertical_tabs',
    '#prefix' => '<h2><small>Sector starter settings</small></h2>',
    '#weight' => -20,
  );
  // Component.
  $form['customizations'] = array(
    '#type' => 'details',
    '#title' => t('Inline SVG logo'),
    '#group' => 'sector_starter',
  );

  // Textarea for user to enter the svg_logo_source.
  $form['customizations']['svg_logo_source'] = array(
    '#type'     => 'textarea',
    '#title'    => t('Add your SVG logo raw source code here:'),
    '#description'    => t('Inline SVGs can be targeted via CSS e.g. to add hover effects. This setting overrides the default logo supplied by the theme via Global Settings below.'),
    '#format'   => 'full_html',
    '#required' => FALSE,
    '#default_value' => theme_get_setting('svg_logo_source'),
  );
}

/**
 * Implements hook_preprocess_block().
 *
 * Sets the svg_logo_source variable so it can be used in twig templates. Gets
 * the variable from the textarea set above.
 */
function sector_starter_preprocess_block(&$variables) {
  $variables['svg_logo_source'] = theme_get_setting('svg_logo_source');
}

/**
 * Implements hook_preprocess_file_link().
 *
 * Creates the link_text variable to be used in filr-link.html.twig. We use this
 * variable to rewrite the link text in the twig file so it uses the name of the
 * media entity node instead of the media entity itself.
 */
function sector_starter_preprocess_file_link(&$variables) {

  // Load the media entity from current route if it can.
  if($media = \Drupal::routeMatch()->getParameter('media')) {
    // Sets the link_text variable.
    if ($media->get('field_title')->value) {
      // Set the text we want for the link.
      $link_text = $media->get('field_title')->value;
      // Set the link text.
      $variables['link']->setText($media->get('field_title')->value);
    }
  }
  // If the user is on a node page, we need to check those too for entity
  // references.
  elseif($node = \Drupal::routeMatch()->getParameter('node')) {
    // Check if file(s) exist on the node.
    if($file = $variables['file']) {
      // Get the file id
      $fid = $file->get('fid')->value;
      // DB query that loads the media id for the file. I've used the file usage
      // table to do this since it seems pretty safe. If the file is oon a node
      // it will have a usage. Open to exploring other options to this though.
      $query = \Drupal::database()->select('file_usage', 'f');
      $query->fields('f', ['id']);
      $query->condition('f.fid', $fid);
      $query->range(0, 1);
      $result = $query->execute()->fetchAssoc();
      // Turn the media id into an int.
      $mid = intval($result['id']);
      // Get a node storage object.
      $media_storage = \Drupal::entityTypeManager()->getStorage('media');
      // Load a single node.
      $media = $media_storage->load($mid);

      if (!empty($media)) {
        // Set the text we want for the link.
        $link_text = $media->get('field_title')->value;
        // Set the link text.
        $variables['link']->setText($media->get('field_title')->value);
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK
 *
 * Sets the page title on media pages to be the value from the title field
 * rather than the file name.
 */
function sector_starter_preprocess_page_title(&$variables) {

  // Load the media entity from current route
  if ($media = \Drupal::routeMatch()->getParameter('media')) {

    // Set the page title
    if ($media->get('field_title')->value) {
      $variables['title'] = $media->get('field_title')->value;
    }
  }
}

/**
 * Implements hook_preprocess_breadcrumb()
 *
 * Works in relation with sector_starter_page_title. Creates a variable that can
 * be used in breadcrumb.html.twig that means we can set the breadcrumb title
 * to be media node name instead of file name
 */
function sector_starter_preprocess_breadcrumb(&$variables){

  // Load the media entity from current route.
  if ($media = \Drupal::routeMatch()->getParameter('media')) {

    // Checks if the media entity loaded has a value in the title field.
    if ($media->get('field_title')->value) {
      // Sets the media title variable for use in breadcrumb.html.twig
      $variables['media_title'] = $media->get('field_title')->value;
    }
  }
}

/**
 * Implements hook_preprocess_page().
 *
 * In Sector D7 we were using context to disable the sidebar region based on
 * taxonomy term. In D8 that is not an option, so this proprocess function
 * simulates that exact same functionality.
 */
function sector_starter_preprocess_page(&$variables) {

  // Load the node entity from the current route.
  $entity = getEntityFromRoute('node');
  if(!empty($entity)) {
    if ($entity->hasField('field_auto_contextual_content')) {
      // Taxonomy name we will be searching for.
      $taxonomy_name = 'Hide sidebar';
      // Get the referenced taxonomy terms from the auto contextual content field.
      $node_contextual_content = $entity->get('field_auto_contextual_content')->referencedEntities();

      // Loops through each taxonomy term checking if the name of the term is
      // the same as $taxonomy_name
      foreach($node_contextual_content as $key => $value) {
        if($value->getName() == $taxonomy_name) {
          // remove the sidebar from the page.
          unset($variables['page']['sidebar']);
          // This doesn't need to keep going once it's found this, so break here
          // and exit the foreach loop.
          break;
        }
      }
    }
  }
}

function sector_starter_preprocess_html(&$variables) {

  $relaventEntities = ['node', 'media'];
  foreach ($relaventEntities as $entityTypeId) {
    // Load the node entity from the current route.
    $entity = getEntityFromRoute($entityTypeId);
    if (!empty($entity)) {
      // Add a class to the <body> if the entity is unpublished.
      if (!$entity->isPublished()) {
        $variables['attributes']['class'][] = 'entity-status-unpublished';
      }
      if (isset($variables['node_status'])) {
        $variables['node_status'] = $entity->isPublished() ? 'published' : 'unpublished';
      }
      /**
       * Get the term id from the 'field_page_variant' taxonomy field.
       * If greater than zero, load the term and acquire the name value
       * as a css safe value.
       */
      if ($entity->hasField('field_page_variant')) {
        $tid = $entity->get('field_page_variant')->target_id;
        if ($tid > 0) {
          $term_object = Term::load($tid);
          $variables['attributes']['class'][] = 'page-variant--' . Html::getClass($term_object->get('name')->value);
        }
      }
    }
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function sector_starter_page_attachments_alter(array &$page) {

  $breakpoints = \Drupal::service('breakpoint.manager')->getBreakpointsByGroup('sector_starter');

  if (!empty($breakpoints)) {
    $media_queries = array();
    foreach ($breakpoints as $breakpoint) {
      foreach ($breakpoints as $id => $breakpoint) {
        $media_queries[$id] = $breakpoint->getMediaQuery();
      }
    }
    $page['#attached']['drupalSettings']['responsive']['breakpoints'] = $media_queries;
  }
}

/**
 * Implements hook_preprocess_field.
 *
 * Bootstrap and Display Suite (DS) don't play together, so the display suite
 * settings are being lost since bootstrap overrides field.html.twig.
 * Unfortunately this means we lost our colons on default fields. So we are
 * going to override the template for field.html.twig and provide the ds
 * settings in the variables.
 *
 * @param $variables
 */
function sector_starter_preprocess_field(&$variables) {
  // Add DS settings.
  if(isset($variables['ds-config']['settings'])) {
    $variables['settings'] = $variables['ds-config']['settings'];
  }
}

/**
 * Helper function.
 *
 * Gets the current node from the route.
 *
 * Needed to get the correct node when viewing a revision.
 * Credit for this code goes to Berdir: https://www.drupal.org/u/berdir
 *
 * Taken from https://www.drupal.org/project/drupal/issues/2730631#comment-12667635
 * and adjusted slightly.
 */
function getEntityFromRoute($entityTypeId) {
  $entity = NULL;
  if (\Drupal::routeMatch()->getParameter($entityTypeId)) {
    $entity = \Drupal::routeMatch()->getParameter($entityTypeId);
  }
  // The node revision page does not upcast the node.
  if (\Drupal::routeMatch()->getParameter($entityTypeId . '_revision')) {
    $revision_id = \Drupal::routeMatch()->getParameter($entityTypeId . '_revision');
    if ($revision_id > 0) {
      return \Drupal::entityTypeManager()->getStorage($entityTypeId)->loadRevision($revision_id);
    }
  }
  switch ($entityTypeId) {
    case 'node':
      if ($entity instanceof NodeInterface) {
        return $entity;
      }
      break;
    case 'media':
      if ($entity instanceof MediaInterface) {
        return $entity;
      }
      break;
  }
}
