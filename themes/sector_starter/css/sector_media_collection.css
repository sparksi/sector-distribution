/**
 * @file
 * Overide the resource multipage css
 */
/* BOOTSTRAP CUSTOM VARIABLES
------------------------------------------------------------------------*/
/* VARIABLES
------------------------------------------------------------------------*/
/**
 * @file
 * Global Variables
 */
/* Custom typography settings for prose (See _prose.scss for explanation). */
/* Establish custom spacing variables based on line height to facilitate vertical rhythm */
/* Black/white colour variables */
/* Brand visited & focused styles */
/* Brand border */
/**
 * Specify your site domain here. Used to override detection of off-site links
 * if a link has been created that uses the sites full absolute href. Removes the external
 * link icon.
*/
/* COMPASS
------------------------------------------------------------------------*/
/*
 * A partial implementation of the Ruby list functions from Compass:
 * https://github.com/Compass/compass/blob/stable/lib/compass/sass_extensions/functions/lists.rb
 */
/*
 * A partial implementation of the Ruby constants functions from Compass:
 * https://github.com/Compass/compass/blob/stable/lib/compass/sass_extensions/functions/constants.rb
 */
/*
 * A partial implementation of the Ruby display functions from Compass:
 * https://github.com/Compass/compass/blob/stable/core/lib/compass/core/sass_extensions/functions/display.rb
 */
/* BOOTSTRAP (Just the components we need)
------------------------------------------------------------------------*/
.clearfix {
  overflow: hidden;
  *zoom: 1;
}

.center-block {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

.pull-right, .pagination--large-arrows > li.next > a, .pagination--large-arrows > li.pager__item--next > a, .pager > li.next > a, .pager > li.pager__item--next > a {
  float: right !important;
}

.pull-left, .pagination--large-arrows > li.previous > a, .pagination--large-arrows > li.pager__item--previous > a, .pager > li.previous > a, .pager > li.pager__item--previous > a {
  float: left !important;
}

.hide {
  display: none !important;
}

.show {
  display: block !important;
}

.invisible {
  visibility: hidden;
}

.text-hide, .pagination--text-hide > li > a, .gallery .pager > li > a {
  font: 0/0 a;
  color: transparent;
  text-shadow: none;
  background-color: transparent;
  border: 0;
}

.hidden {
  display: none !important;
}

.affix {
  position: fixed;
}

/* SUSY
------------------------------------------------------------------------*/
/* BREAKPOINT
------------------------------------------------------------------------*/
/* GENERIC
------------------------------------------------------------------------*/
/**
 * @file
 * Custom mixins
 */
/* Intrinsic ratios (eg: Used by _responsive-ratio) */
/* Cross browser opacity */
/* Font smoothing */
/* Px to Em https://web-design-weekly.com/snippets/converts-pixels-to-ems-with-sass/ */
/* WebKit-style focus */
/* To handle long words and URLs */
/**
 * @file
 * Map Bootstrap breakpoints to nice mixins.
 */
/**
 * @file
 * OOCSS Helpers & BEM modifiers
 */
/* Useful within Display Suite for removing margin from headings. */
.has-no-margin-top {
  margin-top: 0 !important;
}

.has-no-margin {
  margin: 0 !important;
}

/**
 * https://github.com/twbs/bootstrap/pull/12679
 * Use in conjunction with .sr-only to only display content when it's focused.
 * Useful for "Skip to main content" links; see http://www.w3.org/TR/2013/NOTE-WCAG20-TECHS-20130905/G1
*/
.sr-only-focusable:active, .sr-only-focusable:focus {
  position: static;
  width: auto;
  height: auto;
  margin: 0;
  overflow: visible;
  clip: auto;
}

/* Bootstrap gutter killer */
.no-gutter[class*='col-'] {
  padding-right: 0;
  padding-left: 0;
}

/**
  * See Bootstrap. http://getbootstrap.com/css/#type-lists. Repeated here
  * because it is a common 'helper'.
  * Remove the default list-style and left margin on list items
  * (immediate children only). This only applies to immediate children list
  * items, meaning you will need to add the class for any nested lists as well.
  */
/*.list-unstyled {}*/
/* More link */
.more-link {
  font-size: 18px;
  font-weight: 600;
}

.more-link:focus {
  outline-offset: 0;
}

/* Inline block helper */
.inline-block {
  display: inline-block;
  vertical-align: top;
}

/**
 * Responsive margin top OOCSS spacing helpers.
 * Ideally always using margin above your site building blocks for consistency.
 */
.has-margin-top-base {
  margin-top: 0.722em;
}

@media (min-width: 992px) {
  .has-margin-top-base {
    margin-top: 1.444em;
  }
}

.has-margin-top-and-half {
  margin-top: 1.444em;
}

@media (min-width: 992px) {
  .has-margin-top-and-half {
    margin-top: 2.166em;
  }
}

.has-margin-top-double,
.pagination,
.pager {
  margin-top: 1.444em;
}

@media (min-width: 992px) {
  .has-margin-top-double,
  .pagination,
  .pager {
    margin-top: 2.888em;
  }
}

.has-margin-top-triple,
.gallery--carousel .field-name-field-title {
  margin-top: 1.444em;
}

@media (min-width: 480px) {
  .has-margin-top-triple,
  .gallery--carousel .field-name-field-title {
    margin-top: 2.888em;
  }
}

@media (min-width: 992px) {
  .has-margin-top-triple,
  .gallery--carousel .field-name-field-title {
    margin-top: 4.332em;
  }
}

.has-margin-top-half {
  margin-top: 0.722em;
}

/**
 * Responsive padding top OOCSS spacing helpers.
 * If a border is required above your site building block then use padding instead.
 */
.has-padding-top-base {
  padding-top: 0.722em;
}

@media (min-width: 992px) {
  .has-padding-top-base {
    padding-top: 1.444em;
  }
}

.has-padding-top-and-half {
  padding-top: 1.444em;
}

@media (min-width: 992px) {
  .has-padding-top-and-half {
    padding-top: 2.166em;
  }
}

.has-padding-top-double {
  padding-top: 1.444em;
}

@media (min-width: 992px) {
  .has-padding-top-double {
    padding-top: 2.888em;
  }
}

.has-padding-top-triple {
  padding-top: 1.444em;
}

@media (min-width: 480px) {
  .has-padding-top-triple {
    padding-top: 2.888em;
  }
}

@media (min-width: 992px) {
  .has-padding-top-triple {
    padding-top: 4.332em;
  }
}

.has-padding-top-half {
  padding-top: 0.722em;
}

@media (min-width: 1200px) {
  .has-padding-left-one-col {
    padding-left: 6.77966%;
  }
}

@media (min-width: 1200px) {
  .has-padding-right-one-col {
    padding-right: 6.77966%;
  }
}

.has-border-top {
  border-top: 1px solid #e2e2e2;
}

.has-border-top-large {
  border-top: 1px solid #e2e2e2;
}

@media (min-width: 480px) {
  .has-border-top-large {
    border-top: 4px solid #e2e2e2;
  }
}

.has-border-top-largest {
  border-top: 10px solid #e2e2e2;
}

.has-border-top-largest-dark {
  border-top: 10px solid #555555;
}

.has-border-top-alternate {
  position: relative;
  padding-top: 1px;
}

.has-border-top-alternate:before {
  position: absolute;
  top: -2px;
  left: 0;
  content: '';
  width: 40px;
  height: 2px;
  background-color: #e2e2e2;
}

.has-no-border-top {
  border-top: none;
}

@media (min-width: 1200px) {
  .text-center-wide-and-up {
    text-align: center;
  }
}

/* Use to offset elements 'right' within main body area. */
.has-offset-right {
  position: relative;
}

@media (min-width: 1201px) and (max-width: 1259px) {
  .has-offset-right {
    margin-right: -80px !important;
  }
}

@media (min-width: 1360px) {
  .has-offset-right {
    margin-right: -120px !important;
  }
}

/* Use to offset elements 'left' within main body area. */
.has-offset-left {
  position: relative;
}

@media (min-width: 1201px) and (max-width: 1259px) {
  .has-offset-left {
    margin-left: -80px !important;
  }
}

@media (min-width: 1360px) {
  .has-offset-left {
    margin-left: -120px !important;
  }
}

/* Caption */
.caption {
  color: #595959;
  padding: 1.444em 0 0.361em;
  font-size: 85%;
  border-bottom: 1px solid #e2e2e2;
}

@media (min-width: 480px) {
  .caption {
    padding: 28px 0 7px;
  }
}

.caption:empty {
  display: none;
}

.link-down {
  position: relative;
  padding-left: 10px;
}

.link-down:before {
  content: '\2193';
  position: absolute;
  top: -3px;
  left: -1px;
}

/* To handle long words and URLs */
.dont-break-out {
  overflow-wrap: break-word;
  word-wrap: break-word;
  -ms-word-break: break-all;
  word-break: break-word;
  -ms-hyphens: auto;
  -webkit-hyphens: auto;
  hyphens: auto;
}

.pagination > li.pager__item--first > a:after, .pagination > li.pager__item--first > a:before, .pagination > li.pager__item--previous > a:after, .pagination > li.pager__item--next > a:after, .pagination > li.pager__item--last > a:after, .pagination > li.pager__item--last > a:before, .pagination--large-arrows > li.previous > a:after, .pagination--large-arrows > li.pager__item--previous > a:after, .pager > li.previous > a:after, .pager > li.pager__item--previous > a:after, .pagination--large-arrows > li.previous > a:hover:after, .pagination--large-arrows > li.pager__item--previous > a:hover:after, .pager > li.previous > a:hover:after, .pager > li.pager__item--previous > a:hover:after, .pagination--large-arrows > li.next > a:after, .pagination--large-arrows > li.pager__item--next > a:after, .pager > li.next > a:after, .pager > li.pager__item--next > a:after, .pagination--large-arrows > li.next > a:hover:after, .pagination--large-arrows > li.pager__item--next > a:hover:after, .pager > li.next > a:hover:after, .pager > li.pager__item--next > a:hover:after, .gallery .pager li.pager-previous:before, .gallery .pager li.pager-next:before, .gallery--carousel .action--close:before, .gallery--carousel .action--information:before, .gallery--carousel .carousel-control .icon-prev:before, .gallery--carousel .carousel-control .icon-next:before {
  display: inline-block;
  background-image: url("../images/sprite.svg");
  background-size: 80.4375em 89.4375em;
}

.lt-ie9 .pagination > li.pager__item--first > a:after, .lt-ie9 .pagination > li.pager__item--first > a:before, .lt-ie9 .pagination > li.pager__item--previous > a:after, .lt-ie9 .pagination > li.pager__item--next > a:after, .lt-ie9 .pagination > li.pager__item--last > a:after, .lt-ie9 .pagination > li.pager__item--last > a:before, .lt-ie9 .pagination--large-arrows > li.previous > a:after, .lt-ie9 .pagination--large-arrows > li.pager__item--previous > a:after, .lt-ie9 .pager > li.previous > a:after, .lt-ie9 .pager > li.pager__item--previous > a:after, .lt-ie9 .pagination--large-arrows > li.previous > a:hover:after, .lt-ie9 .pagination--large-arrows > li.pager__item--previous > a:hover:after, .lt-ie9 .pager > li.previous > a:hover:after, .lt-ie9 .pager > li.pager__item--previous > a:hover:after, .lt-ie9 .pagination--large-arrows > li.next > a:after, .lt-ie9 .pagination--large-arrows > li.pager__item--next > a:after, .lt-ie9 .pager > li.next > a:after, .lt-ie9 .pager > li.pager__item--next > a:after, .lt-ie9 .pagination--large-arrows > li.next > a:hover:after, .lt-ie9 .pagination--large-arrows > li.pager__item--next > a:hover:after, .lt-ie9 .pager > li.next > a:hover:after, .lt-ie9 .pager > li.pager__item--next > a:hover:after, .lt-ie9 .gallery .pager li.pager-previous:before, .lt-ie9 .gallery .pager li.pager-next:before, .lt-ie9 .gallery--carousel .action--close:before, .lt-ie9 .gallery--carousel .action--information:before, .lt-ie9 .gallery--carousel .carousel-control .icon-prev:before, .lt-ie9 .gallery--carousel .carousel-control .icon-next:before {
  background-image: url("../images/sprite.png");
}

/* COMPONENT
------------------------------------------------------------------------*/
/**
 * @file
 * Override Drupal / Bootstrap pagination
 */
/* Drupal default full pager */
.pagination > li > a {
  position: relative;
  border-radius: 0;
  border: none;
  background-repeat: no-repeat;
  background-color: transparent;
  padding: 10px 15px;
}

.pagination > li > a:hover {
  text-decoration: underline;
}

.pagination > li.active > span {
  padding: 9px 14px;
}

.pagination > li:first-child > a,
.pagination > li:first-child > span {
  border-radius: 0;
}

.pagination > li:last-child > a,
.pagination > li:last-child > span {
  border-radius: 0;
}

.pagination > li.pager__item--first {
  display: none;
}

@media (min-width: 480px) {
  .pagination > li.pager__item--first {
    display: block;
    position: absolute;
    left: 0;
  }
}

.pagination > li.pager__item--first > a {
  padding: 10px 10px 10px 35px;
}

.pagination > li.pager__item--first > a:after {
  content: '';
  position: absolute;
  width: 0.625em;
  height: 1.0625em;
  background-position: -18.625em -26.9375em;
  top: 33%;
  left: 17%;
}

.lt-ie9 .pagination > li.pager__item--first > a:after {
  width: 9px;
  height: 16px;
  background-position: -298px -431px;
}

.pagination > li.pager__item--first > a:before {
  content: '';
  position: absolute;
  width: 0.625em;
  height: 1.0625em;
  background-position: -18.625em -26.9375em;
  top: 33%;
  left: 9%;
}

.lt-ie9 .pagination > li.pager__item--first > a:before {
  width: 9px;
  height: 16px;
  background-position: -298px -431px;
}

.pagination > li.pager__item--previous > a {
  padding: 10px 10px 10px 25px;
}

.pagination > li.pager__item--previous > a:after {
  content: '';
  position: absolute;
  width: 0.625em;
  height: 1.0625em;
  background-position: -18.625em -26.9375em;
  top: 33%;
  left: 9%;
}

.lt-ie9 .pagination > li.pager__item--previous > a:after {
  width: 9px;
  height: 16px;
  background-position: -298px -431px;
}

.pagination > li.pager__item--next > a {
  padding: 10px 25px 10px 10px;
}

.pagination > li.pager__item--next > a:after {
  content: '';
  position: absolute;
  width: 0.625em;
  height: 1.0625em;
  background-position: -22.4375em -31.8125em;
  top: 33%;
  right: 10%;
}

.lt-ie9 .pagination > li.pager__item--next > a:after {
  width: 9px;
  height: 16px;
  background-position: -359px -509px;
}

.pagination > li.pager__item--last {
  display: none;
}

@media (min-width: 480px) {
  .pagination > li.pager__item--last {
    display: block;
    position: absolute;
    right: 0;
  }
}

.pagination > li.pager__item--last > a {
  padding: 10px 35px 10px 10px;
}

.pagination > li.pager__item--last > a:after {
  content: '';
  position: absolute;
  width: 0.625em;
  height: 1.0625em;
  background-position: -22.4375em -31.8125em;
  top: 33%;
  right: 17%;
}

.lt-ie9 .pagination > li.pager__item--last > a:after {
  width: 9px;
  height: 16px;
  background-position: -359px -509px;
}

.pagination > li.pager__item--last > a:before {
  content: '';
  position: absolute;
  width: 0.625em;
  height: 1.0625em;
  background-position: -22.4375em -31.8125em;
  top: 33%;
  right: 9%;
}

.lt-ie9 .pagination > li.pager__item--last > a:before {
  width: 9px;
  height: 16px;
  background-position: -359px -509px;
}

.pagination--large-arrows,
.pager {
  width: 100%;
}

@media (min-width: 480px) {
  .pagination--large-arrows,
  .pager {
    font-size: 24px;
  }
}

.pagination--large-arrows > li > a, .pager > li > a {
  position: relative;
  border-radius: 0;
  border: none;
  background-repeat: no-repeat;
  background-color: transparent;
}

.pagination--large-arrows > li > a:hover, .pager > li > a:hover {
  text-decoration: underline;
}

.pagination--large-arrows > li.previous > a, .pagination--large-arrows > li.pager__item--previous > a, .pager > li.previous > a, .pager > li.pager__item--previous > a {
  padding: 10px 10px 10px 40px;
}

@media (min-width: 480px) {
  .pagination--large-arrows > li.previous > a, .pagination--large-arrows > li.pager__item--previous > a, .pager > li.previous > a, .pager > li.pager__item--previous > a {
    padding: 10px 20px 10px 40px;
  }
}

.pagination--large-arrows > li.previous > a:after, .pagination--large-arrows > li.pager__item--previous > a:after, .pager > li.previous > a:after, .pager > li.pager__item--previous > a:after {
  content: '';
  position: absolute;
  width: 1.5625em;
  height: 2.5625em;
  background-position: -0.3125em -0.3125em;
  top: 2px;
  left: 6px;
  font-size: 16px;
}

.lt-ie9 .pagination--large-arrows > li.previous > a:after, .lt-ie9 .pagination--large-arrows > li.pager__item--previous > a:after, .lt-ie9 .pager > li.previous > a:after, .lt-ie9 .pager > li.pager__item--previous > a:after {
  width: 24px;
  height: 40px;
  background-position: -5px -5px;
}

@media (min-width: 480px) {
  .pagination--large-arrows > li.previous > a:after, .pagination--large-arrows > li.pager__item--previous > a:after, .pager > li.previous > a:after, .pager > li.pager__item--previous > a:after {
    top: 7px;
  }
}

.pagination--large-arrows > li.previous > a:visited, .pagination--large-arrows > li.pager__item--previous > a:visited, .pager > li.previous > a:visited, .pager > li.pager__item--previous > a:visited {
  color: #005ea5;
}

.pagination--large-arrows > li.previous > a:visited:hover, .pagination--large-arrows > li.pager__item--previous > a:visited:hover, .pager > li.previous > a:visited:hover, .pager > li.pager__item--previous > a:visited:hover {
  color: #003259;
}

.pagination--large-arrows > li.previous > a:hover:after, .pagination--large-arrows > li.pager__item--previous > a:hover:after, .pager > li.previous > a:hover:after, .pager > li.pager__item--previous > a:hover:after {
  width: 1.5625em;
  height: 2.5625em;
  background-position: -2.4375em -3.4375em;
}

.lt-ie9 .pagination--large-arrows > li.previous > a:hover:after, .lt-ie9 .pagination--large-arrows > li.pager__item--previous > a:hover:after, .lt-ie9 .pager > li.previous > a:hover:after, .lt-ie9 .pager > li.pager__item--previous > a:hover:after {
  width: 24px;
  height: 40px;
  background-position: -39px -55px;
}

.pagination--large-arrows > li.next > a, .pagination--large-arrows > li.pager__item--next > a, .pager > li.next > a, .pager > li.pager__item--next > a {
  padding: 10px 40px 10px 10px;
}

@media (min-width: 480px) {
  .pagination--large-arrows > li.next > a, .pagination--large-arrows > li.pager__item--next > a, .pager > li.next > a, .pager > li.pager__item--next > a {
    padding: 10px 40px 10px 20px;
  }
}

.pagination--large-arrows > li.next > a:after, .pagination--large-arrows > li.pager__item--next > a:after, .pager > li.next > a:after, .pager > li.pager__item--next > a:after {
  content: '';
  position: absolute;
  width: 1.5625em;
  height: 2.5625em;
  background-position: -8.8125em -12.8125em;
  top: 2px;
  right: 6px;
  font-size: 16px;
}

.lt-ie9 .pagination--large-arrows > li.next > a:after, .lt-ie9 .pagination--large-arrows > li.pager__item--next > a:after, .lt-ie9 .pager > li.next > a:after, .lt-ie9 .pager > li.pager__item--next > a:after {
  width: 24px;
  height: 40px;
  background-position: -141px -205px;
}

@media (min-width: 480px) {
  .pagination--large-arrows > li.next > a:after, .pagination--large-arrows > li.pager__item--next > a:after, .pager > li.next > a:after, .pager > li.pager__item--next > a:after {
    top: 7px;
  }
}

.pagination--large-arrows > li.next > a:visited, .pagination--large-arrows > li.pager__item--next > a:visited, .pager > li.next > a:visited, .pager > li.pager__item--next > a:visited {
  color: #005ea5;
}

.pagination--large-arrows > li.next > a:visited:hover, .pagination--large-arrows > li.pager__item--next > a:visited:hover, .pager > li.next > a:visited:hover, .pager > li.pager__item--next > a:visited:hover {
  color: #003259;
}

.pagination--large-arrows > li.next > a:hover:after, .pagination--large-arrows > li.pager__item--next > a:hover:after, .pager > li.next > a:hover:after, .pager > li.pager__item--next > a:hover:after {
  width: 1.5625em;
  height: 2.5625em;
  background-position: -10.9375em -15.9375em;
}

.lt-ie9 .pagination--large-arrows > li.next > a:hover:after, .lt-ie9 .pagination--large-arrows > li.pager__item--next > a:hover:after, .lt-ie9 .pager > li.next > a:hover:after, .lt-ie9 .pager > li.pager__item--next > a:hover:after {
  width: 24px;
  height: 40px;
  background-position: -175px -255px;
}

.pagination--text-hide > li > a, .gallery .pager > li > a {
  height: 48px;
}

.pagination--text-hide > li.previous > a, .gallery .pager > li.previous > a {
  padding: 10px 20px 10px 10px;
}

.pagination--text-hide > li.next > a, .gallery .pager > li.next > a {
  padding: 10px 10px 10px 20px;
  float: none;
}

/* Drupal's default mini pager */
.pager {
  position: relative;
  /* Extend variant large-arrows as declared above */
}

.pager .pager-current {
  position: absolute;
  top: 11px;
  left: 0;
  width: 100%;
  text-align: center;
  font-size: 18px;
  z-index: -1;
}

@media (min-width: 480px) {
  .pager .pager-current {
    top: 14px;
  }
}

/**
 * @file
 * BEM block for gallery style lists
 */
/**
 * t2-d3
 *
 * 1. Naming convention for modifiers. For example:
 *    .responsive-layout--t2-d3 translates to layout of 2 columns for
 *    tablet breakpoint ('t' for tablet) and 3 columns for desktop and up
 *    ('d' for desktop).
 *
 * 2. We add an additional class (responsive-layout--item) because
 *    views converts the correct class (responsive-layout__slat).
 *    See https://www.drupal.org/node/1371118
 */
.responsive-layout--t2-d3 {
  /* [1] */
  box-sizing: content-box;
  max-width: 100%;
  margin-left: auto;
  margin-right: auto;
}

.responsive-layout--t2-d3:after {
  content: " ";
  display: block;
  clear: both;
}

@media (min-width: 481px) and (max-width: 991px) {
  .responsive-layout--t2-d3 .responsive-layout--item:nth-child(odd),
  .responsive-layout--t2-d3 .responsive-layout__item:nth-child(odd) {
    width: 48.27586%;
    float: left;
    margin-left: 0;
    clear: both;
  }
  .responsive-layout--t2-d3 .responsive-layout--item:nth-child(even),
  .responsive-layout--t2-d3 .responsive-layout__item:nth-child(even) {
    width: 48.27586%;
    float: right;
    margin-left: 3.44828%;
  }
  .lt-ie9 .responsive-layout--t2-d3 .responsive-layout--item, .lt-ie9
  .responsive-layout--t2-d3 .responsive-layout__item {
    float: left;
    width: 48%;
    margin-right: 2%;
  }
}

@media (min-width: 992px) {
  .responsive-layout--t2-d3 .responsive-layout--item,
  .responsive-layout--t2-d3 .responsive-layout__item {
    width: 32.20339%;
    float: left;
    margin-left: 1.69492%;
  }
  .responsive-layout--t2-d3 .responsive-layout--item:nth-child(3n+1),
  .responsive-layout--t2-d3 .responsive-layout__item:nth-child(3n+1) {
    width: 32.20339%;
    float: left;
    margin-left: 0;
    clear: both;
  }
  .responsive-layout--t2-d3 .responsive-layout--item:nth-child(3n+3),
  .responsive-layout--t2-d3 .responsive-layout__item:nth-child(3n+3) {
    width: 32.20339%;
    float: right;
    margin-left: 1.69492%;
  }
  .lt-ie9 .responsive-layout--t2-d3 .responsive-layout--item, .lt-ie9
  .responsive-layout--t2-d3 .responsive-layout__item {
    width: 30%;
    margin-right: 3.3%;
    margin-left: 0;
  }
}

/* d2 */
@media (min-width: 768px) {
  .responsive-layout--d2 .responsive-layout--item:nth-child(odd),
  .responsive-layout--d2 .responsive-layout__item:nth-child(odd) {
    width: 48.27586%;
    float: left;
    margin-left: 0;
    clear: both;
  }
  .responsive-layout--d2 .responsive-layout--item:nth-child(even),
  .responsive-layout--d2 .responsive-layout__item:nth-child(even) {
    width: 48.27586%;
    float: right;
    margin-left: 3.44828%;
  }
  .lt-ie9 .responsive-layout--d2 .responsive-layout--item, .lt-ie9
  .responsive-layout--d2 .responsive-layout__item {
    float: left;
    width: 48%;
    margin-right: 2%;
  }
}

/* d3 */
@media (min-width: 768px) {
  .responsive-layout--d3 .responsive-layout--item,
  .responsive-layout--d3 .responsive-layout__item, .view-filters #views-exposed-form-custom-view-media-collection-listing-page-1 .responsive-layout--item, .view-filters #views-exposed-form-custom-view-media-collection-listing-page-1 .responsive-layout__item {
    width: 32.20339%;
    float: left;
    margin-left: 1.69492%;
  }
  .responsive-layout--d3 .responsive-layout--item:nth-child(3n+1),
  .responsive-layout--d3 .responsive-layout__item:nth-child(3n+1), .view-filters #views-exposed-form-custom-view-media-collection-listing-page-1 .responsive-layout--item:nth-child(3n+1), .view-filters #views-exposed-form-custom-view-media-collection-listing-page-1 .responsive-layout__item:nth-child(3n+1) {
    width: 32.20339%;
    float: left;
    margin-left: 0;
    clear: both;
  }
  .responsive-layout--d3 .responsive-layout--item:nth-child(3n+3),
  .responsive-layout--d3 .responsive-layout__item:nth-child(3n+3), .view-filters #views-exposed-form-custom-view-media-collection-listing-page-1 .responsive-layout--item:nth-child(3n+3), .view-filters #views-exposed-form-custom-view-media-collection-listing-page-1 .responsive-layout__item:nth-child(3n+3) {
    width: 32.20339%;
    float: right;
    margin-left: 1.69492%;
  }
  .lt-ie9 .responsive-layout--d3 .responsive-layout--item, .lt-ie9
  .responsive-layout--d3 .responsive-layout__item, .lt-ie9 .view-filters #views-exposed-form-custom-view-media-collection-listing-page-1 .responsive-layout--item, .view-filters .lt-ie9 #views-exposed-form-custom-view-media-collection-listing-page-1 .responsive-layout--item, .lt-ie9 .view-filters #views-exposed-form-custom-view-media-collection-listing-page-1 .responsive-layout__item, .view-filters .lt-ie9 #views-exposed-form-custom-view-media-collection-listing-page-1 .responsive-layout__item {
    float: left;
    width: 30%;
    margin-right: 3.3%;
    margin-left: 0;
  }
}

/* SPECIFIC
------------------------------------------------------------------------*/
/**
 * @file
 * BEM block for gallery.
 */
.gallery {
  /* Create a positioning context */
  position: relative;
  margin-top: 2.166em;
  /* Special style for the pager in a gallery */
}

@media (min-width: 992px) {
  .gallery {
    margin-top: 2.888em;
  }
}

@media (max-width: 991px) {
  .gallery .field-name-field-description {
    margin-top: 0.722em;
  }
}

.gallery .action--back {
  position: absolute;
  top: -2.166em;
  left: 0;
}

@media (min-width: 992px) {
  .gallery .action--back {
    top: -2.888em;
  }
}

@media (min-width: 992px) {
  .gallery .pager {
    position: relative;
    min-height: 1px;
    padding-left: 15px;
    padding-right: 15px;
    position: absolute;
    top: 0;
    right: 0;
    margin: 0;
    min-height: 300px;
    border-left: 1px solid #e2e2e2;
  }
}

@media (min-width: 992px) and (min-width: 992px) {
  .gallery .pager {
    float: left;
    width: 8.33333%;
  }
}

@media (min-width: 992px) {
  .gallery .pager .pager-current {
    top: 0;
    right: 0;
    text-align: right;
    font-size: 16px;
  }
}

.gallery .pager li.pager-previous, .gallery .pager li.pager-next {
  width: 30px;
  cursor: not-allowed;
}

@media (min-width: 992px) {
  .gallery .pager li.pager-previous, .gallery .pager li.pager-next {
    position: absolute;
    right: 0;
  }
}

.gallery .pager li.pager-previous:before, .gallery .pager li.pager-next:before {
  content: '';
  position: absolute;
  font-size: 16px;
}

.gallery .pager li.pager-previous > a:after, .gallery .pager li.pager-next > a:after {
  top: 4px;
}

@media (min-width: 992px) {
  .gallery .pager li.pager-previous {
    top: 38px;
  }
}

.gallery .pager li.pager-previous > a {
  padding: 10px 20px 10px 10px;
}

.gallery .pager li.pager-previous > a:after {
  left: 3px;
}

.gallery .pager li.pager-previous:before {
  width: 1.5625em;
  height: 2.5625em;
  background-position: -4.5625em -6.5625em;
  top: 4px;
  left: 3px;
}

.lt-ie9 .gallery .pager li.pager-previous:before {
  width: 24px;
  height: 40px;
  background-position: -73px -105px;
}

@media (min-width: 480px) {
  .gallery .pager li.pager-previous:before {
    left: 2px;
  }
}

@media (min-width: 992px) {
  .gallery .pager li.pager-next {
    top: 104px;
  }
}

.gallery .pager li.pager-next > a {
  padding: 10px 10px 10px 20px;
}

.gallery .pager li.pager-next > a:after {
  right: 2px;
}

.gallery .pager li.pager-next:before {
  width: 1.5625em;
  height: 2.5625em;
  background-position: -13.0625em -19.0625em;
  top: 4px;
  right: 2px;
}

.lt-ie9 .gallery .pager li.pager-next:before {
  width: 24px;
  height: 40px;
  background-position: -209px -305px;
}

.gallery__media-wrapper {
  background-color: #111;
}

.gallery__media-wrapper img {
  display: inline;
}

.gallery--carousel {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: #161616;
  z-index: 2;
  margin-top: 0;
}

.gallery--carousel.carousel-is-active {
  display: block;
}

@media (min-width: 992px) {
  .gallery--carousel {
    margin-top: 0;
  }
}

.gallery--carousel img {
  margin: auto;
  white-space: nowrap;
  height: auto;
  width: auto;
  max-height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
}

@media (min-width: 992px) {
  .gallery--carousel img {
    margin: 0 auto;
    position: static;
    top: auto;
    left: auto;
    bottom: auto;
    right: auto;
  }
}

.gallery--carousel .view-header {
  position: relative;
}

.gallery--carousel .action--close {
  position: absolute;
  top: 15px;
  right: 15px;
  z-index: 10;
  width: 50px;
  height: 50px;
  background: #222222;
}

.gallery--carousel .action--close:before {
  width: 0.8125em;
  height: 0.8125em;
  background-position: -46.1875em -56em;
  top: 15px;
  left: 15px;
}

.lt-ie9 .gallery--carousel .action--close:before {
  width: 12px;
  height: 12px;
  background-position: -739px -896px;
}

.gallery--carousel .action--close:hover {
  background: #333333;
}

.gallery--carousel .action--information {
  width: 50px;
  height: 50px;
  background: #222222;
  position: absolute;
  top: 15px;
  right: 75px;
  z-index: 10;
}

@media (min-width: 992px) {
  .js .gallery--carousel .action--information {
    display: none;
  }
}

.gallery--carousel .action--information:before {
  width: 0.8125em;
  height: 0.8125em;
  background-position: -65.5em -74.6875em;
  top: 15px;
  left: 15px;
}

.lt-ie9 .gallery--carousel .action--information:before {
  width: 12px;
  height: 12px;
  background-position: -1048px -1195px;
}

.gallery--carousel .action--information:hover {
  background: #333333;
}

.gallery--carousel .carousel-inner,
.gallery--carousel .item,
.gallery--carousel .file,
.gallery--carousel .row,
.gallery--carousel .col-md-8,
.gallery--carousel .view-content,
.gallery--carousel .carousel,
.gallery--carousel .gallery__media-wrapper,
.gallery--carousel .col-md-3 {
  height: 100%;
}

.gallery--carousel .gallery__media-wrapper {
  position: relative;
  background-color: #1c1c1c;
}

@media (max-width: 991px) {
  .gallery--carousel .gallery__media-wrapper {
    margin-left: -15px;
    margin-right: -15px;
  }
}

@media (max-width: 991px) {
  .gallery--carousel .row {
    margin: 0;
  }
}

.gallery--carousel .col-md-3 {
  border-right: 1px solid #333333;
}

@media (max-width: 991px) {
  .gallery--carousel .col-md-3 {
    position: absolute;
    bottom: 0;
    z-index: 5;
    height: auto;
    padding: 15px;
    border-right: none;
    width: 100%;
    background-color: #1c1c1c;
    display: none;
  }
  .gallery--carousel .col-md-3.caption-is-visible {
    display: block;
  }
}

.gallery--carousel .field-name-field-title {
  color: #ffffff;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.gallery--carousel .field-name-field-description {
  color: #f6f6f6;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.gallery--carousel .carousel {
  margin: 0 auto;
  width: 100%;
}

.gallery--carousel .carousel-control {
  opacity: 1;
  filter: alpha(opacity=100);
  width: 50px;
  height: 50px;
  bottom: auto;
}

.gallery--carousel .carousel-control:hover, .gallery--carousel .carousel-control:focus {
  opacity: 1;
  filter: alpha(opacity=100);
}

.gallery--carousel .carousel-control:focus {
  outline: 3px solid rgba(255, 255, 0, 0.5);
  outline-offset: 0;
}

@media (max-width: 991px) {
  .gallery--carousel .carousel-control:focus {
    outline: none;
  }
}

@media (max-width: 991px) {
  .gallery--carousel .carousel-control {
    width: 100px;
    height: 100px;
  }
}

.gallery--carousel .carousel-control.left {
  background: transparent;
  left: auto;
  right: 15px;
  top: 85px;
}

.gallery--carousel .carousel-control.left:focus {
  background-color: rgba(255, 255, 0, 0.5);
}

@media (max-width: 991px) {
  .gallery--carousel .carousel-control.left:focus {
    background-color: transparent;
  }
}

@media (max-width: 991px) {
  .gallery--carousel .carousel-control.left {
    top: 45%;
    left: 0;
  }
}

.gallery--carousel .carousel-control.right {
  background: transparent;
  right: 15px;
  top: 145px;
}

.gallery--carousel .carousel-control.right:focus {
  background-color: rgba(255, 255, 0, 0.5);
}

@media (max-width: 991px) {
  .gallery--carousel .carousel-control.right:focus {
    background-color: transparent;
  }
}

@media (max-width: 991px) {
  .gallery--carousel .carousel-control.right {
    top: 45%;
    right: 0;
  }
}

.gallery--carousel .carousel-control .icon-prev,
.gallery--carousel .carousel-control .icon-next {
  background: #222222;
  font-size: 10px;
  right: auto;
  left: 0;
  right: 0;
  width: 50px;
  height: 50px;
  margin: 0;
  top: 0;
}

@media (max-width: 991px) {
  .gallery--carousel .carousel-control .icon-prev,
  .gallery--carousel .carousel-control .icon-next {
    background: transparent;
    width: 100px;
    height: 100px;
  }
}

.gallery--carousel .carousel-control .icon-prev:hover,
.gallery--carousel .carousel-control .icon-next:hover {
  background: #333333;
}

@media (max-width: 991px) {
  .gallery--carousel .carousel-control .icon-prev:hover,
  .gallery--carousel .carousel-control .icon-next:hover {
    background: transparent;
  }
}

.gallery--carousel .carousel-control .icon-prev:before,
.gallery--carousel .carousel-control .icon-next:before {
  content: '';
  position: absolute;
  top: 12px;
  left: 16px;
  width: 50px;
  height: 50px;
  background-repeat: no-repeat;
  background-position: 0 0;
}

@media (max-width: 991px) {
  .gallery--carousel .carousel-control .icon-prev:before,
  .gallery--carousel .carousel-control .icon-next:before {
    display: none;
    top: 37px;
    left: 16px;
  }
}

.gallery--carousel .carousel-control .icon-prev:before {
  width: 1.5625em;
  height: 2.5625em;
  background-position: -6.6875em -9.6875em;
}

.lt-ie9 .gallery--carousel .carousel-control .icon-prev:before {
  width: 24px;
  height: 40px;
  background-position: -107px -155px;
}

.gallery--carousel .carousel-control .icon-next:before {
  width: 1.5625em;
  height: 2.5625em;
  background-position: -15.1875em -22.1875em;
  left: 20px;
}

.lt-ie9 .gallery--carousel .carousel-control .icon-next:before {
  width: 24px;
  height: 40px;
  background-position: -243px -355px;
}

@media (max-width: 991px) {
  .gallery--carousel .carousel-control .icon-next:before {
    left: auto;
    right: 20px;
  }
}

html.carousel-is-active:before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background-color: #1c1c1c;
  height: 999px;
  width: 100%;
  z-index: 1;
}

html.carousel-is-active body {
  overflow: hidden;
}

/**
 * @file
 * BEM block for Node.
 */
@media (min-width: 1200px) {
  .node-type-media-collection .node__title .title,
  .page-media-collections-archive .node__title .title {
    text-align: center;
    padding-right: 6.77966%;
    padding-left: 6.77966%;
  }
}

/**
 * @file
 * BEM block for View.
 */
@media (min-width: 1200px) {
  .view-custom-view-media-collection-listing .view-header {
    text-align: center;
    padding-right: 6.77966%;
    padding-left: 6.77966%;
  }
}

.view-custom-view-media-collection-listing .text-center {
  clear: both;
}

.view-custom-view-media-collection-content .slat > a {
  display: block;
}

/**
 * @file
 * BEM block for Views exposed form.
 */
#views-exposed-form-custom-view-media-collection-listing-page-1 .views-exposed-widget.views-submit-button {
  clear: both;
}

@media (min-width: 992px) {
  #views-exposed-form-custom-view-media-collection-listing-page-1 .views-exposed-widget.views-submit-button {
    clear: none;
    margin-top: 30px;
    margin-left: 0.722em;
  }
}

@media (min-width: 1200px) {
  #views-exposed-form-custom-view-media-collection-listing-page-1 .views-exposed-widget.views-submit-button {
    margin-left: 1.444em;
  }
}

@media (min-width: 992px) {
  #views-exposed-form-custom-view-media-collection-listing-page-1 .views-exposed-widget.views-reset-button {
    margin-top: 30px;
  }
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
